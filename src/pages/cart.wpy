<style lang="less" src="../less/cart.less"></style>

<template>
  <view class="container">
    <view wx:if="{{!isNull}}">
      <view class="cart-status" wx:if="{{userLevel}}">
        <text class="font-normal">尊敬的超级会员，本单已为您节省 <text class="font-normal link font-bold">￥{{cartStatus.discount}}</text></text>
      </view>
      <view class="cart-status" wx:else>
        <text class="font-normal">已购￥{{cartStatus.totalprice}}, 会员价<text class="font-normal link font-bold">￥{{cartStatus.memberPrice}}</text></text>
        <view class="default-button" @tap="goApplyVip">加入会员</view>
      </view>
      <repeat for="{{cartList}}" item="item" index="index">
        <view class="cart-list">
          <view class="content" wx:if="{{item.showTitle}}">
            <view class="unedit-layer {{isEdit ? 'animate' : ''}}"></view>
            <text class="title {{isEdit ? 'animate' : ''}}"><text class="iconfont icon-ys_ly"></text>{{item.title}}</text>
            <view class="check-layer">
              <view @tap.stop="coldAll({{index}})" class="cart-checkbox {{item.coldChecked ? 'checked' : ''}}">
                <text class="iconfont icon-fxkdui"></text>
              </view>
            </view>
          </view>
          <view class="item-box">  
            <view class="items">
                <repeat for="{{item.coldlist}}" index="index" item="item" key="index">  
                <view class="item-list {{item.disable ? 'expire' : ''}}">
                  <view class="unedit-layer {{isEdit ? 'animate' : ''}}"></view>
                  <view class="inner txt {{isEdit ? 'animate' : ''}}"> 
                    <view class="inner-layer" data-index="{{index}}" id="{{item.sourceId}}">
                      <text class="title">{{item.title}}</text>
                      <text class="font-small link">会员价：￥{{item.price}} </text>
                      <text class="font-small {{userLevel ? 'through' : ''}}">原价：￥{{item.oldprice}}</text>
                      <text class="tips">规格：{{item.detail}}</text>
                    </view>
                    <view class="inner-image">
                      <image src="{{item.path}}" mode="aspectFill"  @tap.stop="goDetail({{item.id}})"></image>
                      <counteCold :num.sync="item.count" @plusEdit.user="plusCold" @minusEdit.user="minCold" @keyEdit.user="keyCold" :sourceId.sync="item.sourceId" @blurEdit.user="blurCold" :isDisabled.sync="item.disable"></counteCold>  
                    </view>
                  </view>
                  <view data-index="{{index}}" class="inner del" @tap.stop="coldCheck" data-value="{{item.sourceId}}">
                    <view class="cart-checkbox {{item.checked ? 'checked' : ''}}">
                      <text class="iconfont icon-fxkdui"></text>
                    </view>
                  </view>  
                 </view>
                </repeat>
            </view>  
          </view>                 
        </view>
      </repeat>
      <view class="cart-list" wx:if="{{hasExpire}}">
        <view class="content expire-content"><text class="title">失效商品</text><text class="font-normal clear link" @tap.stop="clearExpire">一键清空</text></view>
        <view class="item-box">
          <view class="items">
            <repeat for="{{expire}}" index="index" item="item" key="index">
              <view class="item-list {{item.disable ? 'expire' : ''}}">
                <view class="inner txt">
                  <view class="inner-layer" data-index="{{index}}" id="{{item.sourceId}}">
                    <text class="title">{{item.title}}</text>
                    <text class="font-small link">会员价：￥{{item.memberPrice}} </text>
                    <text class="tips" wx:if="{{item.disable}}">库存不足</text>
                    <text class="font-small {{userLevel ? 'through' : ''}}">原价：￥{{item.price}}</text>
                    <text class="tips">{{item.viceTitle + '×' + item.buyCount}}</text>
                  </view>
                  <view class="inner-image">
                    <image src="{{item.cover}}" mode="aspectFill"></image>
                    <counteCold :num.sync="item.buyCount" @plusEdit.user="plusCold" @minusEdit.user="minCold" @keyEdit.user="keyCold" :sourceId.sync="item.sourceId" @blurEdit.user="blurCold" :isDisabled.sync="item.disable"></counteCold>
                  </view>
                </view>
              </view>
            </repeat>
          </view>
        </view>
      </view>
      <view class="cart-bottom" wx:if="{{!isNull}}">
        <image src="../image/dz_bgbl.png"></image>
        <text class="title link edit" @tap="editTap">{{isEdit ? '取消' : '编辑'}}</text>
        <view class="title link all" @tap.stop="checkAll" wx:if="{{isEdit}}">全选</view>
        <text class="title link edit" @tap="deleteTap" wx:if="{{isEdit}}">删除</text>
        <text @tap.stop="goOrder" class="del-cart {{isEdit ? '' : 'active'}}">去结算</text>
        <text class="cart-info"><text class="tips">(含运费￥{{freight}})</text> 合计: <text class="link">￥{{finalprice}}</text></text>
      </view>
      <view class="vip-tip" wx:if="{{userLevel && !isNull}}">
        <text class="iconfont icon-vip link"></text>
        <text class="title">尊敬的超级会员，生鲜购满2公斤才可包邮哦</text>
      </view>
      <view class="vip-tip no-active" wx:elif="{{!isNull}}">
        <text class="iconfont icon-vip"></text>
        <text class="title">成为会员，生鲜购满2公斤全场包邮</text>
      </view>
    </view>
    <view wx:elif="{{isNull && !isLoading}}" class="blank">
      <defect type="2"></defect>
      <view class="blank-button" hover-class="blank-button-hover" @tap="goCategory">逛一逛</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Counte from '../components/counter'
  import Defect from '../components/defect'

  export default class Cart extends wepy.page {
    config = {
      navigationBarTitleText: '购物车'
    }
    components = {
      counteCold: Counte,
      counteNormal: Counte,
      defect: Defect
    }
    data = {
      token: '',
      cartcount: [],
      checkedList: [],
      tempColdList: [],
      tempNormalList: [],
      cartStatus: {},
      cartList: [],
      coldlist: [],
      coldTitle: '',
      coldChecked: false,
      tempCold: [],
      isEdit: false,
      isNull: false,
      finalprice: 0,
      freight: 0,
      isLoading: true,
      validateCount: 0,
      expire: [],
      timeout: true
    }
    computed = {
      userLevel () {
        if (this.$parent.globalData.userLevel === 0) {
          return false
        } else if (this.$parent.globalData.userLevel === 1) {
          return true
        }
      },
      isNull () {
        if (this.cartList.length === 0) {
          return true
        } else {
          return false
        }
      },
      hasExpire () {
        if (this.expire.length === 0) {
          return false
        } else {
          return true
        }
      }
    }
    methods = {
      editTap () {
        this.isEdit = !this.isEdit
        if (this.isEdit) {
          this.clearList()
        }
      },
      plusCold (e) {
        if (this.timeout) {
          var sourceId = e.currentTarget.dataset.id
          this.cartList.forEach((item) => {
            item.coldlist.forEach((val) => {
              if (val.sourceId === sourceId && val.totalCount > this.validateCount) {
                val.count ++
                this.timeout = false
                if (val.count > val.totalCount) {
                  val.count = val.totalCount
                  this.maxModal('数量已达上限')
                } else {
                  // 发送购物车修改数据
                  this.addCartData(val, 1, () => {
                    this.initPageData(() => {
                      this.timeout = true
                    })
                  })
                }
              }
            })
          })
          this.$apply()
        }
      },
      minCold (e) {
        if (this.timeout) {
          var sourceId = e.currentTarget.dataset.id
          this.cartList.forEach((item) => {
            item.coldlist.forEach((val) => {
              if (val.sourceId === sourceId && val.totalCount > this.validateCount) {
                val.count --
                this.timeout = false
                if (val.count < 1) {
                  val.count = 1
                  this.maxModal('不能再少啦')
                } else {
                  // 发送购物车修改数据
                  this.addCartData(val, -1, () => {
                    this.initPageData(() => {
                      this.timeout = true
                    })
                  })
                }
              }
            })
          })
          this.$apply()
        }
      },
      keyCold (keyVal, e) {
      },
      blurCold (keyVal, e) {
        var sourceId = e.currentTarget.dataset.id
        this.cartList.forEach((item) => {
          item.coldlist.forEach((val) => {
            if (val.sourceId === sourceId) {
              if (keyVal <= 0) {
                val.count = 1
              } else if (val.totalCount > this.validateCount && keyVal > val.totalCount) {
                val.count = val.totalCount
                this.maxModal('数量已达上限')
              } else if (val.totalCount <= this.validateCount) {
                val.count = 0
              } else {
                val.count = keyVal
              }
              if (!val.disable) {
                this.addCartData(val, val.count - val.initCount, () => {
                  this.initPageData()
                })
              }
            }
            return val.count
          })
        })
      },
      goDetail (id) {
        console.log(id)
        wepy.navigateTo({
          url: './detail?id=' + id
        })
      },
      goCategory () {
        wepy.switchTab({
          url: './category'
        })
      },
      goOrder () {
        if (!this.isEdit) {
          if (!this.hasExpire) {
            wepy.navigateTo({
              url: './paycart'
            })
          } else {
            wepy.showToast({
              title: '请先清空失效商品，再提交订单',
              icon: 'none'
            })
          }
        } else {
          wepy.showToast({
            title: '请先退出编辑状态',
            icon: 'none'
          })
        }
      },
      goApplyVip () {
        wepy.navigateTo({
          url: './applyVip'
        })
      },
      coldCheck (e) {
        var value = e.currentTarget.dataset.value
        this.cartList.forEach((item) => {
          item.coldlist.forEach((val) => {
            if (val.sourceId === value) {
              val.checked = !val.checked
            }
          })
          item.tempCold = item.coldlist.filter((item) => {
            return item.checked
          })
          if (item.tempCold.length === item.coldlist.length) {
            item.coldChecked = true
          } else {
            item.coldChecked = false
          }
        })
      },
      coldAll (index) {
        if (this.cartList[index].tempCold.length === this.cartList[index].coldlist.length) {
          this.cartList[index].coldlist.forEach((item) => {
            item.checked = false
          })
          this.cartList[index].coldChecked = false
          this.cartList[index].tempCold = []
        } else {
          this.cartList[index].coldlist.forEach((item) => {
            item.checked = true
          })
          this.cartList[index].coldChecked = true
          this.cartList[index].tempCold = this.cartList[index].coldlist
        }
      },
      checkAll () {
        var total = 0
        var check = 0
        this.cartList.forEach((item, index) => {
          total += item.coldlist.length
          check += item.tempCold.length
        })
        console.log(total, check)
        this.cartList.forEach((item, index) => {
          if (total === check) {
            item.coldlist.forEach((i) => {
              i.checked = false
            })
            item.coldChecked = false
            item.tempCold = []
          } else {
            item.coldlist.forEach((i) => {
              i.checked = true
            })
            item.coldChecked = true
            item.tempCold = item.coldlist
          }
        })
      },
      clearExpire () {
        var result = []
        this.expire.forEach((item) => {
          var obj = {}
          obj.sourceType = item.salesUnitType
          obj.sourceId = item.salesUnitId
          result.push(obj)
        })
        console.log(result)
        this.deleteData(result, () => {
          this.initPageData()
          this.$apply()
        })
      },
      deleteTap () {
        var that = this
        var result = []
        this.cartList.forEach((item) => {
          console.log(item.tempCold)
          item.tempCold.forEach((source) => {
            var obj = {}
            obj.sourceType = source.sourceType
            obj.sourceId = source.sourceId
            result.push(obj)
          })
        })
        if (result.length === 0) {
          wepy.showToast({
            title: '请选择商品',
            duration: 1000,
            image: '../image/cancel.png'
          })
        } else {
          wepy.showModal({
            title: '提示',
            content: '是否删除？',
            success: function (res) {
              if (res.confirm) {
                that.deleteData(result, () => {
                  that.initPageData()
                  that.$apply()
                })
              }
              if (res.cancel) {
              }
            }
          })
        }
      }
    }
    getChecked (arr, val) {
      if (arr.indexOf(val) === -1) {
        arr.push(val)
      } else {
        arr.splice(arr.indexOf(val), 1)
      }
    }
    maxModal (content) {
      wepy.showToast({
        title: content,
        duration: 1000,
        image: '../image/cancel.png'
      })
    }
    deleteData (json, cb) {
      this.token = this.$parent.getToken()
      var _this = this
      var data = {
        token: this.token,
        sourceList: JSON.stringify(json)
      }
      this.$parent.HttpRequest.DeleteCartHttp(data).then((res) => {
        if (res.data.error === 0) {
          cb && cb()
        } else {
          if (_this.$parent.missToken) {
            _this.token = this.$parent.getToken(res.data.error)
          }
        }
      })
    }
    initPageData (cb) {
      this.$parent.showLoading()
      this.token = this.$parent.getToken()
      var _this = this
      var data = {
        token: this.token
      }
      this.cartList = []
      this.expire = []
      this.isLoading = true
      this.finalprice = 0
      this.freight = 0
      this.cartStatus = {}
      this.$parent.HttpRequest.GetCartHttp(data).then((res) => {
        console.log(res)
        _this.$parent.hideLoading()
        _this.isLoading = false
        if (res.data.error === 0) {
          var data = res.data.data
          _this.cartStatus.totalprice = data.price
          _this.cartStatus.discount = data.reduction
          _this.cartStatus.memberPrice = data.memberPrice
          _this.finalprice = data.pay
          _this.freight = data.freight
          data.childOrders.forEach((item) => {
            var obj = {}
            obj.title = item.title
            obj.freight = item.freight
            obj.coldChecked = false
            obj.tempCold = []
            obj.coldlist = _this.initChild(item.salesUnits)
            if (obj.coldlist.length === 0) {
              obj.showTitle = false
            } else {
              obj.showTitle = true
            }
            _this.cartList.push(obj)
            _this.$apply()
          })
          cb && cb()
        } else {
          if (_this.$parent.missToken) {
            _this.token = this.$parent.getToken(res.data.error)
            _this.initPageData(cb)
          }
        }
        _this.$apply()
      }).catch(() => {
        _this.$parent.hideLoading()
        _this.isLoading = false
        _this.$parent.showFail()
      })
    }
    filterList (parent) {
      var tempArr = []
      var tempExpire = []
      tempExpire = parent.filter((item) => {
        return item.keepCount <= this.validateCount || !item.isAllowSale || item.buyCount > item.keepCount
      })
      tempExpire.forEach((item) => {
        item.disable = true
        this.expire.push(item)
      })
      tempArr = parent.filter((item) => {
        return item.keepCount > this.validateCount && item.isAllowSale && item.buyCount <= item.keepCount
      })
      return tempArr
    }
    initChild (parent) {
      var child = []
      var tempExpire = this.filterList(parent)
      tempExpire.forEach((item) => {
        var obj = {}
        obj.path = item.cover
        obj.title = item.title
        obj.price = item.memberPrice
        obj.oldprice = item.price
        obj.id = item.productId
        obj.sourceType = item.salesUnitType
        obj.sourceId = item.salesUnitId
        obj.detail = item.viceTitle + '×' + item.buyCount
        obj.count = item.buyCount
        obj.initCount = item.buyCount
        obj.checked = false
        obj.totalCount = item.keepCount
        child.push(obj)
      })
      return child
    }
    addCartData (good, val, cb) {
      this.token = this.$parent.getToken()
      var _this = this
      var data = {
        token: this.token,
        sourceType: good.sourceType,
        sourceId: good.sourceId,
        count: val
      }
      console.log(data)
      this.$parent.HttpRequest.AddCartHttp(data).then((res) => {
        console.log(res)
        if (res.data.error === 0) {
          cb && cb()
        } else {
          if (_this.$parent.missToken) {
            _this.token = _this.$parent.getToken(res.data.error)
          }
        }
        _this.$apply()
      })
    }
    clearList () {
      this.cartList.forEach((item) => {
        item.coldlist.forEach((i) => {
          i.checked = false
        })
        item.coldChecked = false
        item.tempCold = []
      })
    }
    onLoad () {
      console.log(this.$parent.globalData.userLevel)
      // 判断用户memberHash
      this.$apply()
    }
    onShow () {
      this.isEdit = false
      this.clearList()
      this.initPageData()
      this.$apply()
    }
  }
</script>
