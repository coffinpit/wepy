<style lang="less">
  .container {
    min-height:calc(100vh);
    display:block;
  }
  .order-status{
    width:100%;
    white-space:nowrap;
    line-height:90rpx;
    font-size:28rpx;
    color:#333;
    height:90rpx;
    border-bottom:1px #eee solid;
    background:#fff;
    view{
      width:12%;
      margin:0 4%;
      box-sizing:border-box;
      text-align:center;
      float:left;
      &.active{
        border-bottom: 2px #fe5946 solid;
        color: #fe5946;
      }
    }
  }
  .cart-list{
    width:100%;
    box-sizing:border-box;
    margin-top:20rpx;
    .order-title{
      border-bottom:1px #eee solid;
      close{
        color:#999;
      }
    }
    .content{
      margin-bottom:0;
      padding:20rpx;
      .order-num{
        color:#999;
      }
      .order-status-txt{
        float:right;
        margin-top:2rpx;
        &.close{
          color:#999;
        }
      }
    }
    .iconfont{
      font-size:80rpx;
      vertical-align:middle;
      margin-right:20rpx;
    }
  }
  .item-box{  
    width:100%;
    background-color: #fff;
  }  
  .items{  
    width: 100%; 
    padding:20rpx 0; 
  }  
  .more{
    margin: 0 20rpx;
    padding:20rpx;
    background: #f8f8f8;
    .icon-rightsj{
      font-size:40rpx;
      float:right;
      margin-top:6rpx;
      margin-right:0;
    }
  }
  .inner-image{
    height:150rpx;
    float:right;
    image{
      width:148rpx;
      height:148rpx;
      border:1px #eee solid;
      box-sizing:border-box;
      float:left;
      border-right:none;
    }
  }
  .order-edit{
    border-top:1px #eee solid;
    padding:20rpx 0;
    overflow:hidden;
    .icon-me_dd{
      font-size:110rpx;
      margin-left:-14rpx;
      color:#eee;
      float:left;
    }
    .font-normal, .edit-button{
      float:right;
      margin-right:20rpx;
    }
    .edit-button{
      margin-top:20rpx;
      width:80%;
      button{
        margin:0;
        float:right;
        margin-left:20rpx;
      }
      .blank-button{
        border:1px #999 solid;
        color:#999;
      }
      .default-button{
        padding:0 20rpx;
      }
      .blank-button-hover{
        background: transparent;
        border:1px #fc5e44 solid;
      }
    }
  }
  .hidden{
    display: none;
  }
</style>
<template>
  <view class="container">
      <view class="order-status">
        <repeat for="{{package}}" item="item" index="index"><view class="{{current === index ? 'active' : ''}}" @tap="checkPackage({{index}}, {{item.type}})">{{item.title}}</view></repeat>
      </view>
      <view wx:if="{{!isNull}}">
        <repeat for="{{orderList}}" item="item" index="index">
          <view class="cart-list" wx:if="{{!item.isNull}}">
            <view class="content order-title">
              <text class="font-normal order-num">订单编号：<text selectable="true">{{item.title}}</text></text>
              <text class="font-normal order-status-txt {{item.status === 1 || item.status === 2? 'link' : ''}} {{item.status === 3? 'close' : ''}}">{{item.statusTxt}}</text>
            </view>
            <view class="item-box">
              <view class="items">
                <orderList :orderList.sync="item.orderDetail" :userLevel.sync="userLevel"></orderList>
                <view class="more" @tap="goDetail({{item.id}})">
                  <text class="font-normal">查看全部详情 ({{item.count}}) <text class="iconfont icon-rightsj"></text></text>
                </view>
              </view>
              <view class="order-edit">
                <text class="iconfont icon-me_dd {{item.status === 3 ? 'hidden' : ''}}"></text>
                <text class="font-normal">待付款￥<text class="link">{{item.pay}}</text> (含运费￥{{item.freight}})</text>
                <view class="edit-button {{item.status === 3 ? 'hidden' : ''}}">
                  <button class="blank-button" hover-class="blank-button-hover" wx:if="{{item.status === 1 || item.status === 4}}" @tap="goAddress({{item.id}})">修改地址</button>
                  <button class="blank-button" hover-class="blank-button-hover" wx:if="{{item.status === 1 || item.status === 4}}" @tap="cancel({{item.id}})">取消订单</button>
                  <button class="blank-button" hover-class="blank-button-hover" open-type="contact" session-from="weapp" wx:if="{{item.status === 5 || item.status === 6}}">售后申请</button>
                  <button class="default-button" hover-class="default-button-hover" wx:if="{{item.status === 1}}" @tap="goPay({{item.id}})">付款</button>
                </view>
              </view>
            </view>
          </view>
        </repeat>
      </view>
      <defect wx:elif="{{isNull && !isLoading}}" type="3"></defect>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import OrderList from '../components/orderlist'
  import Defect from '../components/defect'

  export default class Order extends wepy.page {
    config = {
      navigationBarTitleText: '我的订单'
    }
    components = {
      orderList: OrderList,
      defect: Defect
    }
    computed = {
      isNull () {
        if (this.orderList.length === 0) {
          return true
        } else {
          return false
        }
      },
      userLevel () {
        if (this.$parent.globalData.userLevel === 0) {
          return false
        } else if (this.$parent.globalData.userLevel === 1) {
          return true
        }
      }
    }
    data = {
      token: '',
      package: [{
        title: '全部',
        type: 'all'
      }, {
        title: '待支付',
        type: 'unpaid'
      }, {
        title: '待发货',
        type: 'undelivered'
      }, {
        title: '待收货',
        type: 'unreceipted'
      }, {
        title: '售后',
        type: 'refunding'
      }],
      orderStatus: ['异常', '待支付', '售后中', '已关闭', '待发货', '待收货', '交易完成'],
      current: null,
      orderType: 'all',
      orderList: [],
      pageSize: 5,
      pageNum: 1,
      totalPageNum: 0,
      isLoading: true
    }
    methods = {
      checkPackage (index, type) {
        this.current = index
        this.orderType = type
        this.initOrder()
      },
      goDetail (id) {
        wepy.navigateTo({
          url: './orderDetail?id=' + id
        })
      },
      cancel (id) {
        wepy.showModal({
          title: '提示',
          content: '确认取消订单',
          success: (res) => {
            if (res.confirm) {
              this.cancelOrder(id, () => {
                this.initOrder()
              })
            }
          }
        })
      },
      goAddress (id) {
        wepy.navigateTo({
          url: './address?page=order&id=' + id
        })
      },
      goPay (id) {
        var data = {
          token: this.token,
          orderId: id,
          appType: 'ios'
        }
        this.$parent.HttpRequest.PayService(data).then((res) => {
          console.log(res)
          // 调微信支付弹窗
        })
      }
    }
    initOrder () {
      this.$parent.showLoading()
      this.orderList = []
      this.isLoading = true
      var _this = this
      var data = {
        token: this.token,
        pageSize: this.pageSize,
        pageNum: this.pageNum,
        status: this.orderType
      }
      this.$parent.HttpRequest.GetOrderStatus(data).then((res) => {
        console.log(res)
        _this.isLoading = false
        if (res.data.error === 0) {
          _this.$parent.showSuccess()
          var data = res.data.data
          _this.totalPageNum = data.totalPageNum
          data.orders.forEach((item) => {
            var obj = {}
            obj.id = item.id
            obj.title = item.showId
            obj.pay = item.pay
            obj.freight = item.freight
            obj.status = item.status
            obj.statusTxt = _this.orderStatus[item.status]
            obj.count = item.buyingRecords.length
            obj.orderDetail = _this.initChild(item.buyingRecords)
            _this.orderList.push(obj)
          })
        } else {
          _this.$parent.showFail()
        }
        _this.$apply()
      }).catch(() => {
        _this.isLoading = false
        _this.$parent.showFail()
      })
    }
    initChild (parent) {
      var child = []
      parent.forEach((item) => {
        var obj = {}
        obj.path = item.cover
        obj.title = item.productName
        obj.price = item.memberPrice
        obj.oldprice = item.price
        obj.id = item.productId
        obj.sourceType = item.salesUnitType
        obj.sourceId = item.salesUnitId
        obj.detail = item.title + '×' + item.buyingCount
        obj.count = item.buyingCount
        obj.checked = false
        obj.totalCount = item.keepCount
        child.push(obj)
      })
      return child
    }
    cancelOrder (id, cb) {
      var data = {
        token: this.token,
        orderId: id
      }
      console.log(data)
      this.$parent.HttpRequest.CancelOrder(data).then((res) => {
        console.log(res)
        if (res.data.error === 0) {
          cb && cb()
        }
      })
    }
    onLoad (param) {
      this.token = this.$parent.getToken()
      if (param.orderType) {
        this.orderType = param.orderType
        this.package.forEach((item, index) => {
          if (item.type === param.orderType) {
            this.current = index
          }
        })
      } else {
        this.current = 0
      }
      this.$apply()
    }
    onShow () {
      this.initOrder()
    }
  }
</script>
